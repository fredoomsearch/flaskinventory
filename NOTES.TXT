THIS USES VENV, BUT NOT IS A NECESARY REQUERIMENT INIATE IT FOR CAN RUN THE PAGE WHY WE USE DOCKER, AND NOT A LOCAENVIROMENT IN THE MACHINE.

venv stands for virtual environment. It's a local Python environment created inside your machine that keeps project dependencies isolated from the rest of your system.



🧪 How to Run (Docker)
   Clone the repository

git clone https://github.com/your-username/flaskinventory.git
cd flaskinventory

Build and start the containers
docker-compose up --build

Access the app
Visit: http://localhost:5000


COMMANDS WHAT CAN RESOLVE ERRORS

FIRST APPLY THIS AFTER ERASE THE VOLUME
sudo docker-compose down
FOR FINISH CONTAINERS

docker-compose down -v
FOR ERASE VOLUMES OF DOCKER



✅ COMPONENT DESCRIPTIONS
📁 app/

This is your main application package, which includes all logic and templates.
📄 __init__.py

    Contains the create_app() factory function.

    Configures the Flask app, SQLAlchemy, and database URI using environment variables.

    Registers routes from the routes.py blueprint.

    Initializes the database and creates tables (db.create_all()).

📄 models.py

    Defines the Inventory model with SQLAlchemy.

    Fields: id, name, price, mac_address, serial_number, manufacturer, description.

    Each field maps directly to the columns specified in the test.

📄 routes.py

    Implements the required CRUD operations via Flask routes:

        /: Shows all items.

        /add: Adds a new item.

        /edit/<id>: Edits an existing item.

        /delete/<id>: Deletes an item.

    Uses Jinja2 templates to render HTML and handle form data.

    Uses SQLAlchemy to query and commit data to the MySQL DB.

📁 templates/

Contains HTML templates rendered by the Flask routes.

    base.html: Bootstrap-based layout with {% block content %} section.

    index.html: Lists all inventory items in a table with Edit/Delete buttons.

    add.html: Form to add a new item.

    edit.html: Pre-filled form to update an existing item.

🐳 Docker & Setup
📄 Dockerfile

    Likely sets up a Python image with Flask and dependencies installed via requirements.txt.

📄 docker-compose.yml

    Defines two services:

        web: Flask app container.

        db: MySQL 8.0 container.

    Environment variables are correctly passed.

    Healthcheck for MySQL ensures the app waits for the DB before running.

    Port 5000 exposed for Flask and 3307 mapped to MySQL for host debugging.

    Uses a volume mysql_data to persist DB data.

📄 requirements.txt

    Likely includes Flask, Flask_SQLAlchemy, mysqlclient or PyMySQL, etc.

